//Generated by ImportCompleteControllerFile
import { Request, Response } from "express";
import { Post } from "../models/PostModel";
import {
  genericAdd,
  genericDelete,
  genericGetAll,
  genericGetOne,
  genericUpdate,
  genericGetOneBySlug,
  genericGetAndCountAll,
} from "../utils/generic";
import { FindOptions, Op } from "sequelize";
import handleSequelizeError from "../utils/errorHandling";
import {
  convertDateStringToYYYYMMDD,
  convertStringToFloat,
  formatSortAsSequelize,
  getSort,
  isValidPage,
  returnJSONResponse,
} from "../utils/utils";
import sequelize from "../config/db";
import { cloneDeep } from "lodash";
import {
  PostBody,
  PostBodyForUpdate,
  PostQuery,
} from "../interfaces/PostInterfaces";

const ModelObject = Post;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Post> = {
  //Generated by GenerateIncludeOption

  include: [],
  //Generated by GenerateAttributesOption

  attributes: ["postID", "userID", "title", "body"],
};
//Generated by GetAddFunctionWithRelationship
export const addPost = async (req: Request, res: Response) => {
  const body = req.body as Partial<PostBody>;

  //Generated by getRelationshipBodyDeclarationForAdd
  const { postID, userID, title, body } = body;

  //Generated by getMainModelUniquenessValidationForAdd
  const postCount = await Post.count({
    where: {
      //Generated by GetUniquenessWhereFields
    },
  });

  if (postCount > 0) {
    return returnJSONResponse(res, {
      status: "error",
      error: ` already exists`, //Generated by GetUniqueCombinationCaption
    });
  }

  //Generated by GenerateEnumValidation

  //Generated by getChildrenUniquenessValidationForAdd

  //Generated by getChildrenUniquenessValidationWithDatabaseForAdd

  const transaction = await sequelize.transaction();

  try {
    const post = await Post.create(
      {
        //Generated by getModelFieldsValue
        userID: parseInt(userID), //Generated by GenerateCreateUpdateField
        title: title, //Generated by GenerateCreateUpdateField
        body: body,
      },
      { transaction }
    );

    //Generated by GetChildrenInsertsForAdd

    await transaction.commit();

    returnJSONResponse(res, { status: "success", data: post });
  } catch (err) {
    handleSequelizeError(err, res);
  }
};

//Generated by GetUpdateFunctionWithRelationship
export const updatePost = async (req: Request, res: Response) => {
  const body = req.body as PostBodyForUpdate;
  const id = req.params.id;
  const { userID, title, body } = body;

  //Generated by GenerateEnumValidation

  try {
    const result = await sequelize.transaction(async (t) => {
      const promises = [];
      promises.push(
        Post.update(
          {
            userID: parseInt(userID),
            title: title,
            body: body,
          },
          { where: { id }, transaction: t }
        )
      );

      await Promise.all(promises);
      returnJSONResponse(res, { status: "success" });
    });
  } catch (err) {
    handleSequelizeError(err, res);
  }
};

//Generated by Generate_getModelsSimpleFilter
export const getPosts = async (req: Request, res: Response) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Post> = cloneDeep(findOptions);

  const query = req.query as unknown as PostQuery;

  if (!query.simpleOnly) {
    const where: Record<string | symbol, unknown> = {};

    findOptionsCopy.where = where;
    const limit = query.limit ? parseInt(query.limit) : 20;
    findOptionsCopy.limit = limit;

    if (query.page) {
      const { status, num } = isValidPage(query.page);
      if (status && num) {
        findOptionsCopy.offset = limit * (num - 1);
      } else {
        findOptionsCopy.offset = null;
      }
    }

    const sort = formatSortAsSequelize(getSort(query.sort, "post_id"));
    findOptionsCopy.order = sort;

    genericGetAndCountAll(req, res, ModelObject, findOptionsCopy);
  } else {
    genericGetAll(req, res, ModelObject, findOptionsCopy);
  }
};

//Generated by GetGenericController
export const getPost = async (req: Request, res: Response) => {
  const findOptionsCopy: FindOptions<typeof Post> = cloneDeep(findOptions);
  genericGetOne(req, res, ModelObject, findOptionsCopy);
};

//Generated by GetGenericController
export const deletePost = async (req: Request, res: Response) => {
  genericDelete(req, res, ModelObject);
};
